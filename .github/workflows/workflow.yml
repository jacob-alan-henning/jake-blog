name: jake-blog

on:
  push:
    branches: [ "main" ]

if: "!contains(github.event.head_commit.message, '[skip ci]')"

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.6'
    
    - run: gofmt -l ./

    - run: go install golang.org/x/vuln/cmd/govulncheck@latest
    - run: govulncheck -show verbose ./internal/blog

    - run: go install github.com/securego/gosec/v2/cmd/gosec@latest
    - run: gosec ./internal/blog
        
    - name: integration test
      run: go test ./integration_test 

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REPOSITORY: ${{ secrets.ECR_PRIVATE_REPO }}
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --platform linux/amd64 --build-arg INTERNAL_PORT=8080 -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f build/package/Dockerfile .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG 

  provision:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./deployments/terraform

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -out=plan.tfplan
      
    - name: Terraform Apply
      run: terraform apply plan.tfplan 

  deploy-blog:
    needs: [build,test,provision]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./deployments/ansible
    steps:
      - uses: actions/checkout@v4 

      - name: Setup Ansible
        uses: alex-oleshkevich/setup-ansible@v1.0.1
        with:
          version: "11.2.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

       #- name: Install AWS CLI 
         #run: |
           #sudo apt-get update
           #sudo apt-get install -y awscli

      - name: Install Ansible collection dependencies
        run: ansible-galaxy collection install -r requirements.yml

      - name: Install dynamic inventory dependencies
        run: pip install -r inventory/requirements.txt

      - name: Make dynamic inventory executable
        run: chmod +x inventory/lightsail-inventory

      - name: Configure SSH key 
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          printf "%b" "$SSH_KEY" > ~/.ssh/lightsail.pem
          chmod 600 ~/.ssh/lightsail.pem
          echo "Host *
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            IdentityFile ~/.ssh/lightsail.pem
            User ubuntu" > ~/.ssh/config

      - name: "Run Ansible playbook"
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: ${{ secrets.ECR_PRIVATE_REPO }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BLOG_REPO_PASS: ${{ secrets.BLOG_REPO_PASS }}
          BLOG_REPO_PRIV_KEY: ${{ secrets.BLOG_REPO_PRIV_KEY }}
          DNS_DOMAIN: jake-henning.com
        run: ansible-playbook site.yml --tags common

